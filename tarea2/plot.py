import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import numpy as np


def plot_level_set(xs, f, x_left, x_right, y_left, y_right):
    """Make plot of level sets of function f
       and path generated by points in vector xs

    Args:
        xs (list): List of numpy vectors traversed in gradient descent
        f (function): Objective function used to generate the level sets
        x_left (float): Left interval of horizontal axis
        x_right (float): Right interval of horizontal axis
        y_left (float): Left interval of vertical axis
        y_right (float): Right interval of vertical axis

    Output: Matplotlib image
    """
    x1 = np.linspace(x_left, x_right, 1000)
    x2 = np.linspace(y_left, y_right, 1000)

    x1, x2 = np.meshgrid(x1, x2)

    y = np.array([f(np.array([i, j])) for i, j in zip(x1, x2)])

    # Plot filled contour
    cp = plt.contourf(x1, x2, y)

    # Plot x vectors in list xs as red lines
    for i in range(0, len(xs) - 1):
        plt.annotate('', xy=xs[i + 1],
                     xytext=xs[i],
                     arrowprops={'arrowstyle': '-',
                                 'color': 'r',
                                 'lw': 1,
                                 'patchB': None,
                                 'shrinkB': 0,
                                 'connectionstyle': 'arc3,rad=0'},
                     va='center', ha='center')

    # Plot minimum point with yellow triangle
    plt.plot([1], [1], marker="^", markersize=7, c='yellow')

    # Plot initial point with orange circle
    plt.plot([-1.2], [1], marker="o", markersize=6, c='tab:orange')

    # Plot marker legends
    triangle_marker = mlines.Line2D([], [], color='yellow', marker='^',
                                    markersize=7, label='minimum')
    circle_marker = mlines.Line2D([], [], color='tab:orange', marker='o',
                                  markersize=6, label='initial point')
    plt.legend(handles=[triangle_marker, circle_marker])

    # plt.axhline(1, color='white', alpha=.5, dashes=[2, 4],linewidth=1)
    # plt.axvline(1, color='white', alpha=0.5, dashes=[2, 4],linewidth=1)

    # Plot contour lines and axes lables
    cp = plt.contour(x1, x2, y, colors='black', linestyles='dashed', linewidths=1)
    plt.clabel(cp, inline=1, fontsize=8)
    plt.xlabel('x1')
    plt.ylabel('x2')
    plt.show()
